// ------- Работа конструкции try-catch-finally ------


// -- try-catch-finally отработает без ошибок --

// try {
//     undefined = 1; // Здесь не будет ошибки, т.е. код в try отработает корректно
// } catch {
//     console.log("Что-то произошло");
// } finally {
//     console.log('Отличный результат');  // Выводит "Отличный результат" - cработает блок finnaly
// }


// -- try-catch-finally отработает c ошибкой --

// function divideNumber(a, b) {
//     try {
//         const result = a / b; // Попытка выполнить деление
//         if (isNaN(result)) {
//             throw new Error('Результат не является числом');  // <---
//         }
//         console.log('Результат деления:', result);  // <-  // <--
//     } catch (error) {
//         console.log('Ошибка даления:', error);
//     } finally {
//         console.log('Операция деления завершена');
//     }
// }

// divideNumber(10, 2);  // Результат деления: 5 // Пример корректного деления <-
// // Операция деления завершена

// divideNumber(10, 0); // Результат деления: Infinity // Пример деления на ноль <--
// // Операция деления завершена

// divideNumber(10, "л")  // Error: Результат не является числом // Пример создание исключения <---
// // Операция деления завершена


// -- try-catch-finally создание пользовательских ошибок --

// Пользовательские ошибки
// Создание пользовательской ошибки

// Создание класса с пользовательскими ошибками
class CustomError extends Error {
    constructor(message) {
        super(message);  // Вызов конструктора родительского класса (Error) с переданным сообщением
        this.name = 'CustomError';  // Установка имени ошибки
    }
}

function validateNumber(value) {
    if (typeof value !== 'number') {
        throw new CustomError('Значение должно быть числом');  // Выбрасование пользовательской ошибки с сообщением <-
    }
    console.log('Валидация успешна');  // <---
}

// try {
//     validateNumber("42");  // Проверка на число с передачей строки вместо числа <-
// } catch (error) {
//     if (error instanceof CustomError) {  // Проверка, является ли ошибка экземпляром пользовательской ошибки
//         console.error('Ошибка:', error.message);  // Вывод сообщения об ошибки <-
//         console.log('Тип ошибки:', error.name);  // Вывод имени ошибки <-
//     } else {
//         console.error('Проверка ошибки:', error);  // Вывод сообщения об ошибки по умолчанию
//     }
// }

// Ошибка: Значение должно быть числом <-
// Тип ошибки: CustomError


try {
    validateNumber(42);  // Проверка на число с передачей строки вместо числа <-
} catch (error) {
    if (error instanceof CustomError) {  // Проверка, является ли ошибка экземпляром пользовательской ошибки
        console.error('Ошибка:', error.message);  // Вывод сообщения об ошибки <-
        console.log('Тип ошибки:', error.name);  // Вывод имени ошибки <-
    } else {
        console.error('Проверка ошибки:', error);  // Вывод сообщения об ошибки по умолчанию
    }
}

// // Валидация успешна <---