'use strict';

/*
Задание 1:

1. Создайте массив с элементами 1, 2, 3.
Выведите на экран каждый из этих элементов.
2. Создайте массив с произвольными элементами.
Выведите на экран количество элементов в этом массиве.
3. Создайте массив с элементами 'a', 'b', 'c'. Запишите вместо первого элемента
число 1, вместо второго - 2, вместо третьего - 3.
*/

// 1.
// const arr = [1, 2, 3];
// console.log(arr[0]);
// console.log(arr[1]);
// console.log(arr[2]);
// for (let i = 0; i < arr.length; i++) {
//     console.log(arr[i]);
// }

// 2.
// const arr = [1, 54, 2, 67, 2];
// console.log(arr.length);

// 3.
// const arr = ['a', 'b', 'c'];
// arr[0] = 1;
// arr[1] = 2;
// arr[2] = 3;
// console.log(arr);

// Задание 2:

// 1. Создайте массив с элементами 1, 2 и 3. С помощью оператора ++ увеличьте
// каждый элемент массива на единицу.
// 2. Узнайте длину следующего массива и объясните почему такое значение:
// ```
// const arr = [];
// arr[3] = 'a';
// arr[8] = 'b';
// ```
// 3. Пусть дан такой массив: `[1, 2, 3]`. Добавьте ему в конец элементы 4 и 5.
// 4. Создайте произвольный массив из 5 элементов, удалите из него два элемента.

// 1.
// const arr = [1, 2, 3];
// ++arr[0];
// ++arr[1];
// ++arr[2];
// console.log(arr);

// 3.
// const arr = [1, 2, 3];
// arr.push(4);
// arr.push(5);
// console.log(arr);

// 4.
// const arr = [1, 2, 3, 78, 6];
// arr.splice(2, 2, 'Привет');
// console.log(arr);

// Задание 3:

// 1. С помощью цикла for выведите в консоль числа от 11 до 33.
// 2. С помощью цикла for выведите в консоль нечетные числа в промежутке от 1
// до 100 включительно.
// 3. С помощью цикла for выведите в консоль числа от 100 до 0.
// 4. Создать переменную с заданным числом. Умножайте число на 3 столько раз,
// пока результат умножения не станет больше 1000. Какое число получится?
// Посчитайте количество итераций, необходимых для этого.

// 1.
// for (let i = 11; i < 33; i++) {
//     console.log(i);
// }

// 2.
// for (let i = 1; i <= 100; i += 2) {
//     console.log(i);
// }

// 3.
// for (let i = 100; i > 0; i--) {
//     console.log(i);
// }

// 4.
// let num = 6;
// let count = 0;
// for (; num <= 1000;) {
//     count++;
//     num *= 3;
//     // if (num > 1000) {
//     //     break;
//     // }
// }

// console.log(num);
// console.log(count);

// Задание 4:

// 1. Создать массив `[2, 5, 9, 15, 1, 4]`.
// Выведите в консоль те элементы массива, которые больше 3-х, но меньше 10.
// 2. Найдите сумму четных чисел от 2 до 100.
// 3. Создать массив `[2, 5, 9, 3, 1, 4]`.
// Найдите сумму элементов этого массива.
// 4. С помощью цикла сформируйте строку '-1-2-3-4-5-6-7-8-9-'.
// 5. Создать массив `[2, 5, 9, 0, 3, 1, 4]`.
// Запустите цикл, который будет по очереди выводить элементы этого массива в
// консоль до тех пор, пока не встретится элемент со значением 0. После этого
// цикл должен завершить свою работу.

// 1.
// const arr = [2, 5, 9, 15, 1, 4];
// const result = arr.filter((num) => num > 3 && num < 10);
// console.log(result.join('-'));

// 2.
// let result = 0;
// for (let i = 2; i < 100; i += 2) {
//     result += i;
// }
// console.log(result);

// 3. Создать массив `[2, 5, 9, 3, 1, 4]`.
// Найдите сумму элементов этого массива.

// const arr = [2, 5, 9, 3, 1, 4];
// let result = 0;
// for (let i = 0; i < arr.length; i++) {
//     result += arr[i];
// }
// console.log(result);

// console.log(arr.reduce((acc, el) => acc + el, 0));


// 4. С помощью цикла сформируйте строку '-1-2-3-4-5-6-7-8-9-'.
// let result = '';
// for (let i = 1; i < 10; i++) {
//     result += `-${i}`;
// }
// result += '-';
// console.log(result);

// 5. Создать массив `[2, 5, 9, 0, 3, 1, 4]`.
// Запустите цикл, который будет по очереди выводить элементы этого массива в
// консоль до тех пор, пока не встретится элемент со значением 0. После этого
// цикл должен завершить свою работу.

// const arr = [2, 5, 9, 0, 3, 1, 4];
// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] === 0) {
//         break;
//     }
//     console.log(arr[i]);
// }

// Задание 5:

// 1. Создать массив из 10 случайных чисел от 0 до 100 включительно.
// Наобходимо вывести в консоль все числа, которые делятся и на 2, и на 3.
// 2. Дан массив: `[1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3]`. Подсчитайте количество
// цифр 3 в этом массиве.
// 4. Дан массив: `[1, 2, 3, 4, 5]`.
// С помощью метода splice преобразуйте массив в следующий: [1, 4, 5]

// const arr = [];
// for (let i = 0; i < 10; i++) {
//     arr.push(Math.floor(Math.random() * 100));
// }
// console.log(arr.filter((num) => num % 6 === 0));

// 2. Дан массив: `[1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3]`. Подсчитайте количество
// цифр 3 в этом массиве.

// const arr = [1, 2, 3, 2, 4, 3, 5, 6, 3, 2, 3];
// let result = 0;

// for (let i = 0; i < arr.length; i++) {
//     if (arr[i] === 3) {
//         result++;
//     }
// }
// console.log(result);

// 4. Дан массив: `[1, 2, 3, 4, 5]`.
// С помощью метода splice преобразуйте массив в следующий: [1, 4, 5]

// let arr = [1, 2, 3, 4, 5];
// arr.splice(1, 2);
// console.log(arr);


// В функцию передается строка в которой находятся круглые скобки, необходимо
// реализовать функцию так, чтобы она возвращала правду, если скобки парные (
// открывающие и закрывающие), а также порядок открывающих и закрывающих скобок
// верно соблюден.

// ```js
// function validParentheses(str) {
//     const stack = [];
//     for (let i = 0; i < str.length; i++) {
//         if (str[i] === '(') {
//             stack.push(str[i]);
//         } else if (str[i] === ')') {
//             if (stack.length === 0) {
//                 return false;
//             } else if (stack[stack.length - 1] === '(') {
//                 stack.pop();
//             } else {
//                 return false;
//             }
//         }
//     }
//     return stack.length === 0;
// }

// console.log(validParentheses('()')); // true
// console.log(validParentheses('())')); // false
// console.log(validParentheses('())(')); // false

// В функцию передается число, необходимо из функции вернуть максимальное число, 
// содержащее те же цифры, что и в переданном числе. Если было передано 
// некорректное число, вернуть NaN.

// ```js

/**
 *  В функцию передается число, необходимо из функции вернуть максимальное число, 
 * содержащее те же цифры, что и в переданном числе. Если было передано 
 * некорректное число, вернуть NaN.
 * @param {number} num 
 * @returns {number}
 */
function getMax(num) {
    if (typeof num === 'number') {
        // 1. Создать массив с цифрами которые находятся в num
        // 2. Отсортировать массив по убыванию
        // 3. Склеваим массив в одну строку
        // 4. Превратить строку в число

        return +[...num.toString()]
            .map((str) => +str)
            .filter((num) => !Number.isNaN(num))
            .sort((a, b) => b - a)
            .join('');
    } else {
        return NaN;
    }

}

console.log(getMax(6118)); // 8611
console.log(getMax(17)); // 71
console.log(getMax(17.5)); // 751
console.log(getMax('Привет')); // NaN
